----CREATE TABLE 



CREATE TABLE pet (name VARCHAR(20), owner VARCHAR(20), species VARCHAR(20), sex CHAR(1), birth DATE, death DATE);


INSERT INTO pet (name,owner,species,sex,birth,death) VALUES ("kumar","jai","dog",'M',"01/01/2000","01/10/2010");





---- INSERT VALUES 

INSERT INTO STUDENTS(STUD_ID,STUD_NAME,COURSE_NAME,LOCTION,GENDER,PHONE_NO)VALUES(100,'PANNEER','SQL','CHENNAI','M',9090909090);
INSERT INTO STUDENTS(STUD_ID,STUD_NAME,COURSE_NAME,LOCTION,GENDER,PHONE_NO)VALUES(101,'RAMYA','SQL','CHENNAI','F',9090908989);


-------TABLE CREATED AFTER SET PRIMARY KEY


SYNTAX  :  ALTER TABLE CITY ADD PRIMARY KEY(CITY_ID);


----CHECK CONSTRAINTS(PRIMARY KEY,UNIQUE,FOREIGN KEY,NOT NULL)

SYNTAX  :  SELECT * FROM ALL_CONSTRAINTS WHERE OWNER='HR' AND TABLE_NAME='CITY'; 
												           --- BOTH SYNTAX JOIN 
SYNTAX  :  SELECT * FROM ALL_CONS_COLUMNS WHERE OWNER='HR' AND TABLE_NAME='CITY';

SYNTAX  :  SELECT A.OWNER,A.CONSTRAINT_NAME,A.CONSTRAINT_TYPE,B.COLUMN_NAME,B.COLUMN_NAME
	     FROM ALL_CONSTRAINTS A , ALL_CONS_COLUMNS B
	     WHERE A.CONSTRAINT_NAME=B.CONSTRAINT_NAME
	     AND A.OWNER='HR' AND A.TABLE_NAME='CUSTOMER';


----LEVEL

SYNTAX:

SELECT EMPLOYEE_ID,FIRST_NAME,MANAGER_ID,LEVEL
FROM EMPLOYEES
START WITH MANAGER_ID IS NULL CONNECT BY PRIOR EMPLOYEE_ID=MANAGER_ID;



------VIRTUAL:

SYNTAX : GENERATED ALWAYS AS(COLUMN_NAME) VIRTUAL;

CREATE TABLE VIRTUAL_COLUMN1(
ID NUMBER,
FNAME VARCHAR2(20),
LNAME VARCHAR2(20),
FULLNAME VARCHAR2(20) GENERATED ALWAYS AS (FNAME,' ',LNAME)VIRTUAL,
SALARY NUMBER(10),
BONUS NUMBER GENERATED ALWAYS AS (SALARY*10/100)VIRTUAL,);

--------INSERT INTO TABLENAME(COLUMN LIST) SELECT(COLUMN NAME LIST)




------INDEX ORGANIZATION TABLE:
AUTOMATIC ASSIGNED DESCENDING ORDER
SYNTAX  :CRAETE TABLE TABLENAME (COLUMNNAME-1 DATATYPE  PRIMARY KEY) ORGANIZATION INDEX;
EXAMPLE :CRAETE TABLE STUDENT (ID NUMBER PRIMARY KEY) ORGANIZATION INDEX;


-------ANALYTICAL FUNCTION
RANK()
DENSE RANK()
ROW NUMBER()
LEAD()
LAG()
LISTLAG()

CREATE OR REPLACE VIEW EVIEW
AS 
SELECT EMPLOYEE_ID,FIRST_NAME,SALARY,DEPARTMENT_ID 
FROM EMPLOYEES;

DROP VIEW EVIEW;



------COMPLEX VIEW:

	1.UNIQUE/DISTINCT
	2.GROUP FUNCTIONS {MAX.MIN,SUM.COUNT,AVG}
	3.GROUP BY
	4.HAVING 
	5.PSEUDO COLUMN(SYSDATE,ROWID,ROWNUM)
	6.DATE DICTIONARY TABLES
	7.FUNCTIONS
	8.EXPRESSIONS


CREATE OR REPLACE VIEW EMP_VIEW
AS 
SELECT DEPARTMENT_ID,MAX(SALARY)AS "SAL"
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID ORDER BY DEPARTMENT_ID;

SELECT * FROM EMP_VIEW;

VIEWS 
	--WITH READ ONLY - NOT MODIFY

--WITH READ ONLY:

SYNTAX:

CREATE OR REPLACE VIEW EMP1_VIEW
AS
SELECT EMPLOYEE_ID,FIRST_NAME,SALARY,DEPARTMENT_ID 
FROM EMPLOYEES WITH READ ONLY;

CREATE OR REPLACE VIEW EMP_VIEW
AS
SELECT EMPLOYEE_ID,FIRST_NAME,LAST_NAME,SALARY,EMAIL,DEPARTMENT_ID
FROM EMPLOYEES WHERE SALARY>5000 AND SALARY<20000 WITH READ ONLY;

SELECT * FROM EMP1_VIEW;

SELECT * FROM STUDENT;

	-VIEW-WITH READ ONLY

SYNTAX:

CREATE OR REPLACE VIEW V_STUD
AS
SELECT * FROM STUDENT;

DESC STUDENT;

INSERT INTO V_STUD(STUD_ID,STUD_NAME,PHONE_NO)VALUES(10,'HARI',8888888888);

--WITH CHECK OPTION

CREATE OR REPLACE VIEW V_S
AS
SELECT EMPLOYEE_ID,FIRST_NAME,SALARY,DEPARTMENT_ID
FROM EMPLOYEES
WHERE SALARY<50000 AND SALARY>10000;

SELECT * FROM V_S;

========================================================================================


--TABLE PARTITIONING -LIST PARTITION / RANGE PARTITION
--LIST PARTITION 
EX
CREATE TABLE TBL_CUSTOMER
(
CUSTOMER_ID NUMBER(10),
CUSTOMER_NAME VARCHAR2(30),
COUNTRY VARCHAR2(20)
)
PARTITION BY LIST(COUNTRY)
(
PARTITION P1 VALUES('INDIA'),
PARTITION P2 VALUES('CHINA'),
PARTITION P3 VALUES('USA'),
PARTITION P4 VALUES('DEFAULT')
);

--RANGE PARTITION 
EX:


CREATE TABLE RANGE_TABLE
(
E_ID NUMBER(10),
E_NAME VARCHAR2(30),
E_SAL NUMBER(10),
E_DATE DATE
)
PARTITION BY RANGE(E_SAL)
(
PARTITION P1 VALUES LESS THAN 10000,
PARTITION P2 VALUES LESS THAN 20000,
PARTITION P3 VALUES LESS THAN 30000
);

=========================================================================
SQL LOADER--


CREATE TABLE S_LOADER(COUNRTY_ID NUMBER,
COUNTRY_CODE VARCHAR2(15),
COUNTRY_NAME VARCHAR2(20),
COUNTRY_LANGUAGE VARCHAR2(25));

===========================================================

-----------SYNTAX:  DROP DIRECTORY DIRECTORY_NAME;
			EX: DROP DIRECTORY PATH:

=============================================================
INDEX:

		SELECT * FROM USER_INDEXES;

		SELECT * FROM USER_IND_COLUMNS;

		SELECT * FROM USER_IND_EXPRESSIONS;

		SELECT * FROM USER_IND_STATISTICS;

=============================================================================
INNER JOINS FOR 4-TABLE:

IMPLICITY METHOD:

SYNTAX:

SELECT
E.EMPLOYEE_ID,
E.FIRST_NAME,
E.SALARY,
E.HIRE_DATE,
E.MANAGER_ID,
D.DEPARTMENT_ID,
D.DEPARTMENT_NAME,
L.LOCATION_ID,
L.CITY,
C.COUNTRY_ID,
C.COUNTRY_NAME
FROM EMPLOYEES E INNER JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID=D.DEPARTMENT_ID 
INNER JOIN LOCATIONS L
ON D.LOCATION_ID=L.LOCATION_ID 
INNER JOIN COUNTRIES C
ON L.COUNTRY_ID=C.COUNTRY_ID;
--------------------------------------------------------------------
ANSI METHOD:

SELECT
E.EMPLOYEE_ID,
E.FIRST_NAME,
E.SALARY,
E.HIRE_DATE,
E.MANAGER_ID,
D.DEPARTMENT_ID,
D.DEPARTMENT_NAME,
L.LOCATION_ID,
L.CITY,
C.COUNTRY_ID,
C.COUNTRY_NAME
FROM EMPLOYEES E,DEPARTMENTS D,LOCATIONS L,COUNTRIES C
WHERE E.DEPARTMENT_ID=D.DEPARTMENT_ID AND D.LOCATION_ID=L.LOCATION_ID AND L.COUNTRY_ID=C.COUNTRY_ID;
------------------------------------------------------------------------------------------------------------------
INNER JOINS 5-TABLE:
IMPLICITY METHOD:

SELECT
E.EMPLOYEE_ID,
E.FIRST_NAME,
E.SALARY,
E.HIRE_DATE,
E.MANAGER_ID,
D.DEPARTMENT_ID,
D.DEPARTMENT_NAME,
L.LOCATION_ID,
L.CITY,
C.COUNTRY_ID,
C.COUNTRY_NAME,
J.JOB_ID,
J.JOB_TITLE
FROM EMPLOYEES E,DEPARTMENTS D,LOCATIONS L,COUNTRIES C,JOBS J
WHERE E.DEPARTMENT_ID=D.DEPARTMENT_ID AND D.LOCATION_ID=L.LOCATION_ID AND L.COUNTRY_ID=C.COUNTRY_ID AND E.JOB_ID=J.JOB_ID;
------------------------------------------------------------------------------------------------------------------------------------
ANSI METHOD:

SELECT
E.EMPLOYEE_ID,
E.FIRST_NAME,
E.SALARY,
E.HIRE_DATE,
E.MANAGER_ID,
D.DEPARTMENT_ID,
D.DEPARTMENT_NAME,
L.LOCATION_ID,
L.CITY,
C.COUNTRY_ID,
C.COUNTRY_NAME,
J.JOB_ID,
J.JOB_TITLE
FROM EMPLOYEES E INNER JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID=D.DEPARTMENT_ID 
INNER JOIN LOCATIONS L
ON D.LOCATION_ID=L.LOCATION_ID 
INNER JOIN COUNTRIES C
ON L.COUNTRY_ID=C.COUNTRY_ID 
INNER JOIN JOBS J
ON E.JOB_ID=J.JOB_ID;
------------------------------------------------------------------------------------------------------------------------
joins

select * from student;

select * from marks;

select s.stud_id,s.stud_name,s.phone_no,m.stud_id marks_table_id,m.maths_mark,m.science_mark,m.social_mark,total_mark,(tamil_mark+english_mark) language_mark
from student s full outer join marks m
on s.stud_id=m.stud_id;
---------------------------------------------------------------------------------------------